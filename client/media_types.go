// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "goa.learn": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/uzimith/goa-learn/design
// --out=$(GOPATH)/src/github.com/uzimith/goa-learn
// --version=v1.3.0

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"time"
)

// Article (default view)
//
// Identifier: application/vnd.article+json; view=default
type Article struct {
	// 作成日時
	CreatedAt time.Time `form:"created_at" json:"created_at" xml:"created_at"`
	// 作成者
	CreatedBy *int `form:"created_by,omitempty" json:"created_by,omitempty" xml:"created_by,omitempty"`
	// ID
	ID int `form:"id" json:"id" xml:"id"`
	// text
	Text string `form:"text" json:"text" xml:"text"`
}

// Validate validates the Article media type instance.
func (mt *Article) Validate() (err error) {

	if mt.Text == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "text"))
	}

	return
}

// DecodeArticle decodes the Article instance encoded in resp body.
func (c *Client) DecodeArticle(resp *http.Response) (*Article, error) {
	var decoded Article
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// ArticleCollection is the media type for an array of Article (default view)
//
// Identifier: application/vnd.article+json; type=collection; view=default
type ArticleCollection []*Article

// Validate validates the ArticleCollection media type instance.
func (mt ArticleCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeArticleCollection decodes the ArticleCollection instance encoded in resp body.
func (c *Client) DecodeArticleCollection(resp *http.Response) (ArticleCollection, error) {
	var decoded ArticleCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
