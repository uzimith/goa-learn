// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "goa.learn": article Resource Client
//
// Command:
// $ goagen
// --design=github.com/uzimith/goa-learn/design
// --out=$(GOPATH)/src/github.com/uzimith/goa-learn
// --version=v1.3.0

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListArticlePath computes a request path to the list action of article.
func ListArticlePath() string {

	return fmt.Sprintf("/article")
}

// List
func (c *Client) ListArticle(ctx context.Context, path string, id []int) (*http.Response, error) {
	req, err := c.NewListArticleRequest(ctx, path, id)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListArticleRequest create the request corresponding to the list action endpoint of the article resource.
func (c *Client) NewListArticleRequest(ctx context.Context, path string, id []int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	for _, p := range id {
		tmp3 := strconv.Itoa(p)
		values.Add("id", tmp3)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowArticlePath computes a request path to the show action of article.
func ShowArticlePath(id int) string {
	param0 := strconv.Itoa(id)

	return fmt.Sprintf("/article/%s", param0)
}

// Get arcitle by id
func (c *Client) ShowArticle(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowArticleRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowArticleRequest create the request corresponding to the show action endpoint of the article resource.
func (c *Client) NewShowArticleRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
